# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=tests/conftest.py
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        pipenv run flake8 --ignore=W504 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics --exclude=tests/conftest.py
    - name: Test with coverage and pytest
      run: |
        pipenv run coverage run --source glmtree -m pytest
        pipenv run coverage report
        pipenv run coverage xml
    - name: Test security
      run: |
        pipenv run pip install bandit
        pipenv run bandit -r glmtree
    - name: Build documentation
      run: |
        cd docs
        PIPENV_PIPFILE=../Pipfile pipenv run make html
        cd ..
    - name: Upload documentation
      run: |
        export LATEST_COMMITER_EMAIL=`git --no-pager log -1 -s --format="%ae"`
        echo $LATEST_COMMITER_EMAIL
        git config --global user.email "$LATEST_COMMITTER_EMAIL"
        git config --global user.name "$GITHUB_ACTOR"
        git add -f docs/build/html
        git commit -am "Rollout version ${{ env.APPLICATION_TAG_VERSION }}"
        git checkout pages
        rm -rf docs
        mkdir docs_temp
        git checkout master -- docs README.md
        cp -rf docs/build/html/* docs_temp/
        rm -rf docs
        mv docs_temp docs
        git add docs
        if ! git diff-index --quiet HEAD -- ; then git commit -am "Rollout version ${{ env.APPLICATION_TAG_VERSION }}" && git push origin pages --force; else echo "Nothing to push"; fi
        git checkout master
    - name: Build and check package
      run: |
        pipenv run pipenv_to_requirements
        pipenv run pip install --upgrade keyring keyrings.alt
        pipenv run python setup.py sdist bdist_wheel
        pipenv run twine check dist/*
