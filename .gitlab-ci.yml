.ci_tools: &ci_tools
  image:
    name: layer-kraft.registry.saas.cagip.group.gca/ci-tools:latest

.common_python: &common_python
  image:
    name: docker-remote.registry.saas.cagip.group.gca/library/python:3.8-slim

variables:
  WORKON_HOME: "$CI_PROJECT_DIR/.cache/venvs"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIPENV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pipenv"
  PIPENV_PIPFILE: "$CI_PROJECT_DIR/Pipfile"

.common_tag: &common_tag
  tags:
  - kubernetes

.common_deploy_deb: &common_deploy_deb
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt update && apt install -y openssh-client )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo "$GITLAB_SSH_KEY" |  tr -d ' ' | base64 -d | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.ca.cib >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - apt update
    - apt install -y git
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"

.global_cache: &global_cache
  cache:
    paths:
      - .cache/pip
      - .cache/pipenv
      - .cache/venvs
    policy: pull-push

.pull_cache: &pull_cache
  cache:
    paths:
      - .cache/pip
      - .cache/pipenv
      - .cache/venvs
    policy: pull

stages:
  - lint
  - install
  - test
  - security
  - sonar_check
  - document
  - deploy
  - promote_staging
  - promote_stable

lint:
  stage: lint
  <<: *global_cache
  <<: *common_tag
  <<: *common_python
  script:
    - pip install flake8
    - flake8 lrtree --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 --ignore=W504 lrtree --count --max-complexity=15 --max-line-length=120 --statistics
  only:
    refs:
      - branches
    changes:
      - .gitlab-ci.yml
      - Pipfile
      - lrtree/**/*

install:
  stage: install
  artifacts:
    paths:
      - build.env
      - Pipfile.lock
  <<: *global_cache
  <<: *common_tag
  <<: *common_python
  script:
    - pip install pipenv
    - pipenv install
    - pipenv run python -c 'import lrtree; print(lrtree.__version__)'  # otherwise next line doesn't error
    - echo export APPLICATION_TAG_VERSION=`pipenv run python -c 'import lrtree; print(lrtree.__version__)'` >> build.env
  only:
    - master

test:
  stage: test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    paths:
      - coverage.xml
  <<: *global_cache
  <<: *common_tag
  <<: *common_python
  script:
    - pip install pipenv
    - pipenv install -d --skip-lock
    - pipenv run coverage run --source lrtree/ -m pytest
    - pipenv run coverage report
    - pipenv run coverage xml
  only:
    refs:
      - branches
    changes:
      - .gitlab-ci.yml
      - Pipfile
      - lrtree/**/*
      - tests/**/*

security:
  stage: security
  <<: *pull_cache
  <<: *common_python
  <<: *common_tag
  script:
    - pip install pipenv
    - pipenv run bandit -r lrtree

quality_check:
  stage: sonar_check
  image:
    name: docker-remote.registry.saas.cagip.group.gca/sonarsource/sonar-scanner-cli:4.6
  <<: *common_tag
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_SCANNER_OPTS: "-Djavax.net.ssl.trustStore=cacerts"
  script:
    - . ./build.env
    - apk --update add java-common
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - if [ ! -z $GITLAB_SRV_ACCOUNT ]; then wget -qO - ${PKI}/cacreditagricoleserver.crt >> cacreditagricoleserver.crt ; fi
    - if [ ! -z $GITLAB_SRV_ACCOUNT ]; then wget -qO - ${PKI}/rca_credit_agricole_group.crt >> rca_credit_agricole_group.crt ; fi
    - if [ ! -z $GITLAB_SRV_ACCOUNT ]; then cat cacreditagricoleserver.crt rca_credit_agricole_group.crt > credit_agricole_bundle.crt ; fi
    - if [ ! -z $GITLAB_SRV_ACCOUNT ]; then keytool -import -alias mycert -file cacreditagricoleserver.crt -storetype jks -trustcacerts -noprompt -keypass keypass -keystore cacerts -storepass test@123 ; fi
    - if [ ! -z $GITLAB_SRV_ACCOUNT ]; then export SONAR_SCANNER_OPTS="-Djavax.net.ssl.trustStore=cacerts" ; fi
    - sonar-scanner -Dsonar.exclusions=tests/**,coverage.xml,setup.py,docs/** -Dsonar.python.coverage.reportPaths=coverage.xml -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$SONAR_KEY -Dsonar.projectVersion=$APPLICATION_TAG_VERSION
  only:
   - master

document:
  stage: document
  <<: *pull_cache
  <<: *common_python
  <<: *common_tag
  script:
    - . ./build.env
    - pip install pipenv
    - apt update
    - apt install -y make libpq-dev gcc git
    - cd docs
    - pipenv run make clean
    - pipenv run make html
    - git config --global http.sslverify false
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git clone https://$GITLAB_SRV_ACCOUNT:$GITLAB_TOKEN@$GITLAB_DOCS_REPO docs_to_publish
    - rm -rf docs_to_publish/public
    - mkdir docs_to_publish/public
    - cp -r build/html/* docs_to_publish/public/
    - cd docs_to_publish
    - git add -A
    - |-
        if ! git diff-index --quiet HEAD --; then
            git commit -am "Rollout version $APPLICATION_TAG_VERSION"
            git push
        else
            echo "Nothing to push"
        fi
  artifacts:
    paths:
      - docs/build/html
    expire_in: 1 week
  only:
    refs:
      - branches
    changes:
      - .gitlab-ci.yml
      - lrtree/**/*
      - docs/**/*

deploy:
  artifacts:
    paths:
      - dist/
  stage: deploy
  <<: *pull_cache
  <<: *common_tag
  <<: *common_python
  script:
    - apt-get update
    - apt-get install -y wget
    - pip install pipenv
    - pipenv run pipenv_to_requirements
    - pipenv run python3 setup.py sdist bdist_wheel
    - python3 setup.py sdist bdist_wheel
    - wget -qO - ${PKI}/cacreditagricoleserver.crt >> cacreditagricoleserver.crt
    - wget -qO - ${PKI}/rca_credit_agricole_group.crt >> rca_credit_agricole_group.crt
    - cat cacreditagricoleserver.crt rca_credit_agricole_group.crt > credit_agricole_bundle.crt
    - 'echo TARGET REPOSITORY : ${ARTI_PYPI_SCRATCH_REGISTRY}'
    - echo ${ARTI_PYPI_SCRATCH_REGISTRY} >> .pypirc
    - pipenv run twine upload --cert credit_agricole_bundle.crt --config-file .pypirc --repository arti dist/*
  only:
   - master

promote_staging:
  stage: promote_staging
  when: manual
  <<: *ci_tools
  <<: *common_tag
  variables:
    CREDS: "${ARTI_USER}:${ARTI_PASSWORD}"
    SOURCE_REPO: "${ARTI_PYPI_SCRATCH_REGISTRY}"
    TARGET_REPO: "${ARTI_PYPI_STAGING_REGISTRY}"
    IMAGE: lrtree
  script:
    - . ./build.env
    - 'echo SOURCE REPOSITORY : ${SOURCE_REPO}'
    - 'echo TARGET REPOSITORY : ${TARGET_REPO}'
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - if [[ $(curl -S -k -u ${CREDS} -XPOST https://${ARTI_REGISTRY}/artifactory/api/copy/${SOURCE_REPO}/${IMAGE}?to=/${TARGET_REPO} | jq --raw-output '.messages[0].level') = "INFO" ]]; then { echo "Success"; exit 0; }; else { echo >&2 "Error in promote"; exit 1; }; fi
  only:
   - master

promote_stable:
  stage: promote_stable
  when: manual
  <<: *ci_tools
  <<: *common_tag
  variables:
    SOURCE_REPO: "${ARTI_PYPI_STAGING_REGISTRY}"
    TARGET_REPO: "${ARTI_PYPI_STABLE_REGISTRY}"
    IMAGE: lrtree
  script:
    - . ./build.env
#    - apk update
#    - apk add --no-cache python3 py3-pip
    - 'echo GENERATED TAG : $APPLICATION_TAG_VERSION'
    - jfrog config add rt-server --artifactory-url=https://${ARTI_REGISTRY} --user=${ARTI_USER} --password=${ARTI_PASSWORD} --interactive=false
    - jfrog config use rt-server
    - jfrog rt ping
    - jfrog rt pip-config --server-id-resolve rt-server --repo-resolve ${TARGET_REPO}
    - if [[ $(jfrog rt u dist/ ${TARGET_REPO}/${IMAGE}/${APPLICATION_TAG_VERSION}/ --build-name=${IMAGE} --build-number=${APPLICATION_TAG_VERSION} --module=${IMAGE} | jq --raw-output '.status') = "success" ]]; then { echo "Success"; exit 0; }; else { echo >&2 "Error in promote"; exit 1; }; fi
#    - which python3
#    - ln -s $(which python3) /usr/bin/python
#    - CURL_CA_BUNDLE="" JFROG_CLI_LOG_LEVEL=DEBUG jfrog rt pip-install ${IMAGE}
#    - pip show ${IMAGE}
  only:
   - master
